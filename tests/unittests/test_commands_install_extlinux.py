# This file is part of curtin. See LICENSE file for copyright and license info.

import os
from pathlib import Path
import tempfile

from .helpers import CiTestCase

from curtin import config
from curtin import paths
from curtin.commands import install_extlinux


USE_EXTLINUX = ['extlinux']

EXPECT_HDR = '''\
## /boot/extlinux/extlinux.conf
##
## IMPORTANT WARNING
##
## The configuration of this file is generated automatically.
## Do not edit this file manually, use: u-boot-update

default l0
menu title U-Boot menu
prompt 0
timeout 50
'''

EXPECT_L0 = '''
label l0
\tmenu label Linux 6.8.0-48-generic
\tlinux {fw_boot_dir}/vmlinuz-6.8.0-48-generic
\tinitrd {fw_boot_dir}/initrd.img-6.8.0-48-generic
\tappend ro quiet
'''

EXPECT_L0R = '''
label l0r
\tmenu label Linux 6.8.0-48-generic (rescue target)
\tlinux {fw_boot_dir}/vmlinuz-6.8.0-48-generic
\tinitrd {fw_boot_dir}/initrd.img-6.8.0-48-generic
\tappend ro single
'''

EXPECT_L1 = '''
label l1
\tmenu label Linux 6.8.0-40-generic
\tlinux {fw_boot_dir}/vmlinuz-6.8.0-40-generic
\tinitrd {fw_boot_dir}/initrd.img-6.8.0-40-generic
\tappend ro quiet
'''

EXPECT_L1R = '''
label l1r
\tmenu label Linux 6.8.0-40-generic (rescue target)
\tlinux {fw_boot_dir}/vmlinuz-6.8.0-40-generic
\tinitrd {fw_boot_dir}/initrd.img-6.8.0-40-generic
\tappend ro single
'''

EXPECT_L2 = '''
label l2
\tmenu label Linux 5.15.0-127-generic
\tlinux {fw_boot_dir}/vmlinuz-5.15.0-127-generic
\tinitrd {fw_boot_dir}/initrd.img-5.15.0-127-generic
\tappend ro quiet
'''

EXPECT_L2R = '''
label l2r
\tmenu label Linux 5.15.0-127-generic (rescue target)
\tlinux {fw_boot_dir}/vmlinuz-5.15.0-127-generic
\tinitrd {fw_boot_dir}/initrd.img-5.15.0-127-generic
\tappend ro single
'''

EXPECT_BODY = ('\n' + EXPECT_L0 + EXPECT_L0R +
               '\n' + EXPECT_L1 + EXPECT_L1R +
               '\n' + EXPECT_L2 + EXPECT_L2R)


class TestInstallExtlinux(CiTestCase):
    def setUp(self):
        self.tmpdir = tempfile.TemporaryDirectory(suffix='-curtin')
        self.target = self.tmpdir.name

        versions = ['6.8.0-40', '5.15.0-127', '6.8.0-48']
        boot = os.path.join(self.target, 'boot')
        Path(f'{boot}').mkdir()
        os.system(f'ls {boot}')
        for ver in versions:
            Path(f'{boot}/config-{ver}-generic').touch()
            Path(f'{boot}/initrd.img-{ver}-generic').touch()
            Path(f'{boot}/vmlinuz-{ver}-generic').touch()

        Path(f'{self.target}/empty-dir').mkdir()
        self.maxDiff = None

    def test_get_kernel_list(self):
        """Check that the list of kernels is correct"""
        iter = paths.get_kernel_list(self.target, full_initrd_path=False)
        self.assertEqual(
            ('vmlinuz-6.8.0-48-generic', 'initrd.img-6.8.0-48-generic',
             '6.8.0-48-generic'),
            next(iter))
        self.assertEqual(
            ('vmlinuz-6.8.0-40-generic', 'initrd.img-6.8.0-40-generic',
             '6.8.0-40-generic'),
            next(iter))
        self.assertEqual(
            ('vmlinuz-5.15.0-127-generic', 'initrd.img-5.15.0-127-generic',
             '5.15.0-127-generic'),
            next(iter))
        try:
            val = next(iter)
            raise ValueError(f'Extra value {val}')
        except StopIteration:
            pass

    def test_empty(self):
        """An empty configuration with no kernels should just have a header"""
        out = install_extlinux.build_content(config.BootCfg(USE_EXTLINUX),
                                             f'{self.target}/empty-dir',
                                             '')
        self.assertEqual(out, EXPECT_HDR)

    def test_normal(self):
        """Normal configuration, with both 'default' and 'rescue' options"""
        out = install_extlinux.build_content(config.BootCfg(USE_EXTLINUX),
                                             self.target, '/boot')
        self.assertEqual(EXPECT_HDR + EXPECT_BODY.format(fw_boot_dir='/boot'),
                         out)

    def test_no_rescue(self):
        """Configuration with only the 'default' options"""
        cfg = config.BootCfg(USE_EXTLINUX, alternatives=['default'])
        out = install_extlinux.build_content(cfg, self.target, '/boot')
        self.assertEqual(
            EXPECT_HDR +
            ('\n' + EXPECT_L0 + '\n' + EXPECT_L1 + '\n' + EXPECT_L2).format(
                fw_boot_dir='/boot'),
            out)

    def test_no_default(self):
        """Configuration with only the 'rescue' options"""
        cfg = config.BootCfg(USE_EXTLINUX, alternatives=['rescue'])
        out = install_extlinux.build_content(cfg, self.target, '/boot')
        self.assertEqual(
            EXPECT_HDR +
            ('\n' + EXPECT_L0R + '\n' + EXPECT_L1R + '\n' + EXPECT_L2R).format(
                fw_boot_dir='/boot'),
            out)

    def test_separate_boot_partition(self):
        """Check handling of a separate /boot partition"""
        cfg = config.BootCfg(USE_EXTLINUX)
        out = install_extlinux.build_content(cfg, self.target, '')
        self.assertEqual(EXPECT_HDR + EXPECT_BODY.format(fw_boot_dir=''), out)

    def check_extlinux(self) -> str:
        """Common checks for extlinux

        Return: Contents of extlinux.conf
        """
        extlinux_path = self.target + '/boot/extlinux'
        self.assertTrue(os.path.exists(extlinux_path))
        extlinux_file = extlinux_path + '/extlinux.conf'
        self.assertTrue(os.path.exists(extlinux_file))
        with open(extlinux_file, encoding='utf-8') as inf:
            return inf.read()

    def test_install(self):
        """Make sure the file is written to the disk"""
        install_extlinux.install_extlinux(config.BootCfg(USE_EXTLINUX),
                                          self.target, '/boot')
        out = self.check_extlinux()
        self.assertEqual(EXPECT_HDR + EXPECT_BODY.format(fw_boot_dir='/boot'),
                         out)

    def test_install_separate_boot_partition(self):
        """Check installation with a separate /boot partition"""
        cfg = config.BootCfg(USE_EXTLINUX)
        install_extlinux.install_extlinux(cfg, self.target, '')
        out = self.check_extlinux()
        self.assertEqual(EXPECT_HDR + EXPECT_BODY.format(fw_boot_dir=''), out)


# vi: ts=4 expandtab syntax=python
